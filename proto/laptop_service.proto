syntax = "proto3";

package aleg.laptops;

// option go_package = ".;pb";
option go_package = "github.com/aleg/go-grpc-laptops/pb";

import "laptop_message.proto";
import "filter_message.proto";

// Create lapotop unary RPC - messages
message CreateLaptopRequest { Laptop laptop = 1; }
message CreateLaptopResponse { string id = 1; }

// Search lapotop server-streaming RPC - messages
message SearchLaptopRequest { Filter filter = 1; }
message SearchLaptopResponse { Laptop laptop = 1; }

// Upload image client-streaming RPC - messages
message UploadImageRequest {
  // `ImageInfo` has a close connection with the upload
  // request message.
  message ImageInfo {
    string laptop_id = 1;
    string image_type = 2; // jpeg / png / etc...
  }

  oneof data {
    ImageInfo info = 1; // metadata info about the file before sending the actual data
    bytes chunk_data = 2; // file data
  };
}
message UploadImageResponse {
  string id = 1;  // of the image generated by the server
  uint32 size = 2;  // total size of the image in bytes
}

// Rate laptop bidirectional-streaming RPC - messages
message RateLaptopRequest {
  string laptop_id = 1;
  double score = 2;
}
message RateLaptopResponse {
  string laptop_id = 1;
  uint32 rated_count = 2;
  double average_score = 3;
}

service LaptopService {
    rpc CreateLaptop(CreateLaptopRequest) returns (CreateLaptopResponse) {}; // unary RPC
    rpc SearchLaptop(SearchLaptopRequest) returns (stream SearchLaptopResponse) {}; // server-streaming RPC
    rpc UploadImage(stream UploadImageRequest) returns (UploadImageResponse) {}; // client-streaming RPC (upload in chunks)
    rpc RateLaptop(stream RateLaptopRequest) returns (stream RateLaptopResponse) {}; // bidirectional-streaming RPC
}
